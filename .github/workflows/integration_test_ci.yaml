name: CI Integration Test

on:
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  ci-integration-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build standalone binary
        run: |
          pyinstaller --clean jacoco_filter.spec
          echo "dist/ contents:"
          find dist -type f
        shell: bash

      - name: Run binary with CLI args
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            BIN="./dist/jacoco-filter/jacoco-filter.exe"
          else
            BIN="./dist/jacoco-filter/jacoco-filter"
          fi

          echo "Running binary: $BIN"
          "$BIN" --inputs "examples/project/**/sample.xml" "example/module*/**/*.xml" --exclude-paths "**/module_A/**" --rules examples/rules.txt

      - name: Rename CLI result for diff
        run: |
          mv ./examples/project/module_B/another/sample.filtered.xml ./examples/project/module_B/another/sample.filtered.cli.xml
          mv ./examples/project/module_C/target/sample.filtered.xml ./examples/project/module_C/target/sample.filtered.cli.xml
        shell: bash

      - name: Run binary with config
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            BIN="./dist/jacoco-filter/jacoco-filter.exe"
          else
            BIN="./dist/jacoco-filter/jacoco-filter"
          fi

          echo "Running binary: $BIN"
          "$BIN" --config jacoco_filter.toml

      - name: Compare filtered outputs
        run: |
          echo "Comparing filtered results"
          diff -u ./examples/project/module_B/another/sample.filtered.cli.xml ./examples/project/module_B/another/sample.filtered.xml
          diff -u ./examples/project/module_C/target/sample.filtered.cli.xml ./examples/project/module_C/target/sample.filtered.xml
        shell: bash

      - name: Normalize and compare filtered output
        run: |
          unix_expected=$(mktemp)
          unix_actual=$(mktemp)
          
          # Convert both files to Unix line endings
          tr -d '\r' < examples/sample.expected.xml > "$unix_expected"
          tr -d '\r' < examples/project/module_B/another/sample.filtered.xml > "$unix_actual"

          echo "üîç Comparing normalized versions:"
          diff -u "$unix_expected" "$unix_actual"
        shell: bash
